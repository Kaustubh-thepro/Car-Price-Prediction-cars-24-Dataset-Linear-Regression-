# -*- coding: utf-8 -*-
"""Cars 24 Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HMc7eQwdFgqS-NJX62xy31p-tjr7zDJP
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('cars_24_combined.csv', index_col=0)
df.head()

df.info()

"""# EDA : Data Cleaning

List of Data cleaning



*   In Year remove the Nan values
*   In Year convert float to int
"""

for col in df.columns:
    print(f"Unique values for column '{col}':")
    print(df[col].unique())
    print("-" * 30)

df.dropna(subset=['Year'], inplace=True)
df.info()

df['Year'].unique()

df['Year'].astype(int)

df.info()

df['Location'].unique()

df.dropna(subset=['Location'], inplace=True)
df.info()

df['Owner'].unique()

sns.regplot(x='Year', y='Price', data=df, scatter_kws={'s': 10}, line_kws={'color': 'red'})
plt.title('Year vs Price')
plt.xlabel('Year')
plt.ylabel('Price')
plt.show()

sns.regplot(x='Distance', y='Price', data=df, scatter_kws={'s': 10}, line_kws={'color': 'red'})
plt.title('Distance vs Price with Regression Line')
plt.xlabel('Distance')
plt.ylabel('Price')
plt.show()

sns.regplot(x='Owner', y='Price', data=df, scatter_kws={'s': 10}, line_kws={'color': 'red'})
plt.title('Owner vs Price with Regression Line')
plt.xlabel('Owner')
plt.ylabel('Price')
plt.show()

sns.boxplot(x='Fuel', y='Price', data=df)
plt.title('Fuel Type vs Price')
plt.xlabel('Fuel Type')
plt.ylabel('Price')
plt.show()

sns.boxplot(x='Drive', y='Price', data=df)
plt.title('Drive Type vs Price')
plt.xlabel('Drive Type')
plt.ylabel('Price')
plt.show()

sns.boxplot(x='Type', y='Price', data=df)
plt.title('Car Type vs Price')
plt.xlabel('Car Type')
plt.ylabel('Price')
plt.show()

sns.boxplot(x='Owner', y='Price', data=df)
plt.title('Owner vs Price')
plt.xlabel('Owner')
plt.ylabel('Price')
plt.show()

location_counts = df['Location'].value_counts()
print("Most frequent locations:")
print(location_counts.head())

df.describe().transpose()

def remove_outliers_iqr_grouped(df, group_col, target_col):
    """
    Remove outliers from target_col using IQR within each group of group_col.
    """
    def iqr_filter(group):
        Q1 = group[target_col].quantile(0.25)
        Q3 = group[target_col].quantile(0.75)
        IQR = Q3 - Q1
        lower = Q1 - 1.5 * IQR
        upper = Q3 + 1.5 * IQR
        return group[(group[target_col] >= lower) & (group[target_col] <= upper)]

    return df.groupby(group_col, group_keys=False).apply(iqr_filter)

# Remove extreme outliers within each Fuel type
df = remove_outliers_iqr_grouped(df, 'Fuel', 'Price')

# Optionally also within Drive type
df = remove_outliers_iqr_grouped(df, 'Drive', 'Price')

# Optionally also within Car Type
df = remove_outliers_iqr_grouped(df, 'Type', 'Price')

# Optionally also within Car Type
df = remove_outliers_iqr_grouped(df, 'Owner', 'Price')

sns.boxplot(x='Fuel', y='Price', data=df)
plt.title('Fuel Type vs Price')
plt.xlabel('Fuel Type')
plt.ylabel('Price')
plt.show()

sns.boxplot(x='Drive', y='Price', data=df)
plt.title('Drive Type vs Price')
plt.xlabel('Drive Type')
plt.ylabel('Price')
plt.show()

sns.boxplot(x='Type', y='Price', data=df)
plt.title('Car Type vs Price')
plt.xlabel('Car Type')
plt.ylabel('Price')
plt.show()

sns.boxplot(x='Owner', y='Price', data=df)
plt.title('Owner vs Price')
plt.xlabel('Owner')
plt.ylabel('Price')
plt.show()

"""# Model


"""

x = df.drop(columns=['Price'])
y = df['Price']

x

y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

ohe = OneHotEncoder()
ohe.fit(x[['Car Name', 'Location', 'Fuel', 'Drive', 'Type']])

column_trans = make_column_transformer((OneHotEncoder(categories=ohe.categories_), ['Car Name', 'Location', 'Fuel', 'Drive', 'Type']),
                                       remainder='passthrough')

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

pipe = make_pipeline(column_trans, lr)

pipe.fit(x_train, y_train)

y_pred = pipe.predict(x_test)

r2_score(y_test, y_pred)

import numpy as np
mae = mean_absolute_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(rmse)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

import pickle

pickle.dump(pipe, open('LinearRegressionModelv2.pkl', 'wb'))

